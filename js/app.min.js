/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const appHeight = () => {
    const doc = document.documentElement;
    doc.style.setProperty('--app-height', `${window.innerHeight}px`);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (appHeight);

/***/ }),
/* 2 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   burgerClose: () => (/* binding */ burgerClose),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const burger = () => {
    const menuIcon = document.querySelector('.header__menu-icon');
    const menuBody = document.querySelector('.menu');
    const body = document.querySelector('body');

    if (menuIcon) {
        menuIcon.addEventListener("click", function () {
            body.classList.toggle('_lock');
            menuIcon.classList.toggle('_active');
            menuBody.classList.toggle('_active');
        })
    }
}

const burgerClose = () => {
    const menuIcon = document.querySelector('.header__menu-icon');
    const menuBody = document.querySelector('.menu');
    const body = document.querySelector('body');

    if (menuIcon.classList.contains('_active')) {
        body.classList.remove('_lock');
        menuIcon.classList.remove('_active');
        menuBody.classList.remove('_active');
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (burger);

/***/ }),
/* 3 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function counter() {

    // counter initialisation 
    function counterInit(countersItems) {
        let counters = countersItems ? countersItems : document.querySelectorAll('[data-counter]');
        if (counters) {
            counters.forEach(counter => {
                animateCounter(counter);
            });
        }
    }

    // animation function
    function animateCounter(counter) {
        let startTimeStamp = null;
        const duration = parseInt(counter.dataset.counter) ? parseInt(counter.dataset.counter) : 1000;
        const startValue = parseInt(counter.innerHTML);
        const startPosition = 0;
        const step = (timestamp) => {
            if (!startTimeStamp) {
                startTimeStamp = timestamp;
            }
            const progress = Math.min((timestamp - startTimeStamp) / duration, 1);
            if (startValue < 10) {
                counter.innerHTML = '0' + Math.floor(progress * (startPosition + startValue));
            } else {
                counter.innerHTML = Math.floor(progress * (startPosition + startValue));
            }
            if (progress < 1) {
                window.requestAnimationFrame(step);
            }
        }
        window.requestAnimationFrame(step);
    }
    // Start on window load
    //counterInit();

    let options = {
        threshold: 0.3
    };
    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const targetElement = entry.target;
                const counterItems = targetElement.querySelectorAll('[data-counter]');
                if (counterItems.length) {
                    counterInit(counterItems)
                }
                // Turn off watchening after working out
                observer.unobserve(targetElement);
            }
        });
    }, options);

    let sections = document.querySelectorAll('.counters');
    if (sections.length) {
        sections.forEach(section => {
            observer.observe(section);
        });
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (counter);

/***/ }),
/* 4 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const lazy = () => {
    const lazyBlocks = document.querySelectorAll('.video');

    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const target = entry.target;
                showImages(target);
                observer.unobserve(target);
            }
        });
    }, {
        threshold: 0,
        rootMargin: "500px",
    });

    lazyBlocks.forEach(lazyBlock => {
        imageObserver.observe(lazyBlock);
    });

    const showImages = (target) => {
        const videos = target.querySelectorAll('video[data-src]');

        if (videos.length) {
            videos.forEach((video) => {
                if (video.dataset.src) {
                    video.setAttribute('src', video.dataset.src);
                    video.removeAttribute('data-src');
                }
            });
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lazy);

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_functions_appHeight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _modules_functions_burger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _modules_animations_counter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _modules_functions_lazy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);

(0,_modules_functions_appHeight_js__WEBPACK_IMPORTED_MODULE_0__["default"])();


(0,_modules_functions_burger_js__WEBPACK_IMPORTED_MODULE_1__["default"])();


(0,_modules_animations_counter_js__WEBPACK_IMPORTED_MODULE_2__["default"])();


(0,_modules_functions_lazy_js__WEBPACK_IMPORTED_MODULE_3__["default"])();

function emailTest(input) {
    return !/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(input.value);
}

const checkFooterInput = (input) => {
    if (input.value.length > 0) {
        input.closest('.form-footer').querySelector('button').classList.add('active');
    } else {
        input.closest('.form-footer').querySelector('button').classList.remove('active');
    }
}
const showFooterBtn = (input) => {
    checkFooterInput(input);
    input.closest('.form-footer').classList.remove('error');
}
const chechEmail = (btn, e) => {
    const form = btn.closest('.form-footer');
    const input = form.querySelector('input[name="email"]');

    console.log(input.value);

    if (emailTest(input)) {
        form.classList.add('error');
        e.preventDefault();
    }
}


const showUpBtn = () => {
    const btn = document.querySelector('.up');

    if (btn && window.scrollY > 500) {
        btn.classList.add('active');
    } else if (btn && window.scrollY <= 500) {
        btn.classList.remove('active');
    }
}
const scrollToTop = () => {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

const checkInput = (input) => {
    if (input.value.length > 0) {
        return true;
    } else {
        return false;
    }
}
const checkForm = (input) => {
    const form = input.closest('.form');

    const name = form.querySelector('[name="user-name"]');
    const email = form.querySelector('[name="email"]');
    const text = form.querySelector('[name="message"]');
    const btn = form.querySelector('button');

    if (checkInput(name) !== false && checkInput(email) !== false && checkInput(text) !== false) {
        btn.classList.add('active');
    } else {
        btn.classList.remove('active');
    }

}


const range = () => {
    const ranges = document.querySelectorAll('.range');

    ranges.forEach((range) => {
        const input = range.querySelector('input');
        const thumb = range.querySelector('.range__thumb');
        const progress = range.querySelector('.range__progress');

        let percent;

        percent = ((input.value - input.min) / (input.max - input.min) * 100);

        thumb.style.left = percent + '%';
        progress.style.right = (100 - percent) + '%';

        input.addEventListener('input', () => {
            input.value = Math.min(parseInt(input.value));
            percent = ((input.value - input.min) / (input.max - input.min) * 100);

            thumb.style.left = percent + '%';
            progress.style.right = (100 - percent) + '%';
        });
    });
}
range();

const headerChange = () => {
    const header = document.querySelector('.header');

    if (window.scrollY > 50) {
        header.classList.add('fixed');
    } else {
        header.classList.remove('fixed');

    }
}
headerChange();

const lazyVideo = () => {
    const lazyBlocks = document.querySelectorAll('[data-video]');

    const videoObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                const target = entry.target;
                videoInsert(target, index);
                initVideo(target, index);
                observer.unobserve(target);
            }
        });
    }, {
        threshold: 0,
        rootMargin: '200px 0px 0px 0px'
    });

    lazyBlocks.forEach(lazyBlock => {
        videoObserver.observe(lazyBlock);
    });

    const videoInsert = (target, index) => {
        const frame = document.createElement('iframe');
        frame.setAttribute('id', `player${index}`);
        frame.setAttribute('src', `${target.dataset.video}?api=1&controls=0&autoplay=0&muted=0&loop=0&background=1`);
        frame.setAttribute('frameborder', '0');
        frame.setAttribute('webkitallowfullscreen', '');
        frame.setAttribute('mozallowfullscreen', '');
        frame.setAttribute('allowfullscreen', '');
        frame.setAttribute('data-ready', 'true');
        frame.setAttribute('allow', 'autoplay; fullscreen; accelerometer; encrypted-media; gyroscope; picture-in-picture');


        target.prepend(frame);
        target.removeAttribute('data-video');
    }

    const initVideo = (target, index) => {
        const iframe = target.querySelector(`#player${index}`);
        const player = new Vimeo.Player(iframe);

        const body = document.querySelector('body');
        const video = target.closest('.video');

        const play = video.querySelector('.video__play');
        const screen = video.querySelector('.video__screen');
        const close = video.querySelector('.video__close');
        const start = video.querySelector('.video__start');
        const end = video.querySelector('.video__end');
        const mute = video.querySelector('.video__mute');

        const volumeSlider = video.querySelector('.video__volume');
        const volumeRange = volumeSlider.parentElement;

        const bar = video.querySelector('.video__bar');
        const barRange = bar.parentElement;

        barRange.addEventListener('click', (e) => {
            const rect = barRange.getBoundingClientRect();
            const clickPosition = e.clientX - rect.left;
            const rangeWidth = rect.width;
            const clickPercent = (clickPosition / rangeWidth) * 100;

            const thumb = barRange.querySelector('.range__thumb');
            const progress = barRange.querySelector('.range__progress');

            const newValue = (clickPercent / 100) * (bar.max - bar.min) + parseFloat(bar.min);
            bar.value = Math.min(parseInt(newValue));
            thumb.style.left = clickPercent + '%';
            progress.style.right = (100 - clickPercent) + '%';

            player.getDuration().then(function (duration) {
                const newTime = (Math.min(parseInt(newValue)) / 100) * duration;
                player.setCurrentTime(newTime).catch(function (error) {
                    console.log('Error setting current time: ', error);
                });
            });
        });

        volumeRange.addEventListener('click', (e) => {
            const rect = volumeRange.getBoundingClientRect();

            const rangeHeight = rect.height;
            const clickPosition = e.clientY - rect.top;
            const clickPercent = 100 - ((clickPosition / rangeHeight) * 100);

            const thumb = volumeRange.querySelector('.range__thumb');
            const progress = volumeRange.querySelector('.range__progress');

            const newValue = (clickPercent / 100) * (volumeSlider.max - volumeSlider.min) + parseFloat(volumeSlider.min);
            volumeSlider.value = Math.min(parseInt(newValue));
            thumb.style.left = clickPercent + '%';
            progress.style.right = (100 - clickPercent) + '%';

            player.setVolume(volumeSlider.value / 100);

            mute.classList.remove('mute');
        });

        play.addEventListener('click', function () {
            player.getPaused().then(function (paused) {
                if (paused) {
                    player.play();
                    play.classList.add('play');
                } else {
                    player.pause();
                    play.classList.remove('play');
                }
            });
        });

        screen.addEventListener('click', function () {
            video.classList.toggle('full');
            body.classList.toggle('_lock');
        });

        close.addEventListener('click', function () {
            video.classList.toggle('full');
            body.classList.toggle('_lock');
        });

        mute.addEventListener('click', function () {
            mute.classList.toggle('mute');

            const thumb = volumeRange.querySelector('.range__thumb');
            const progress = volumeRange.querySelector('.range__progress');

            if (mute.classList.contains('mute')) {
                volumeSlider.value = 0;
                player.setVolume(0);
                thumb.style.left = '0%';
                progress.style.right = '100%';
            } else {
                volumeSlider.value = 100;
                player.setVolume(volumeSlider.value / 100);
                thumb.style.left = '100%';
                progress.style.right = '0%';
            }
        });

        volumeSlider.addEventListener('input', function () {
            player.setVolume(volumeSlider.value / 100);
        });

        player.on('timeupdate', function (event) {
            const currentTime = formatTime(event.seconds);
            start.innerText = currentTime;

            video.classList.remove('loading');

            const progress = (event.seconds / event.duration) * 100;
            bar.value = progress;

            const thumb = bar.nextElementSibling.querySelector('.range__thumb');
            const progressBar = bar.nextElementSibling.querySelector('.range__progress');

            thumb.style.left = progress + '%';
            progressBar.style.right = (100 - progress) + '%';
        });

        player.on('loaded', function () {
            player.getDuration().then(function (duration) {
                const formattedDuration = formatTime(duration);
                end.innerText = formattedDuration;
            });
        });

        bar.addEventListener('input', function () {
            player.getDuration().then(function (duration) {
                const newTime = (bar.value / 100) * duration;
                player.setCurrentTime(newTime).catch(function (error) {
                    console.log('Error setting current time: ', error);
                });
            });
        });

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const sec = Math.floor(seconds % 60);
            return `${minutes}:${sec < 10 ? '0' : ''}${sec}`;
        }

        player.on('ended', function () {
            player.setCurrentTime(0);
            play.classList.remove('play');
        });
    }
}
lazyVideo();

const activateFullVideo = (video) => {

    if (!video.classList.contains('active')) {
        video.classList.add('active');
        video.classList.add('loading');

        const play = video.querySelector('.video__play');
        const cursor = video.querySelector('.video__cursor');

        play.click();

        if (cursor) {
            cursor.remove();
        }
    }
};

const playPreview = () => {
    const videos = document.querySelectorAll('.video');

    if (videos.length) {
        videos.forEach((video) => {
            const cursor = document.createElement('div');
            cursor.classList.add('video__cursor');

            const preview = video.querySelector('.video__preview video');

            video.addEventListener('mouseover', () => {
                preview.play();

                if (!video.classList.contains('active') && window.innerWidth > 993) {
                    video.appendChild(cursor);
                }

                document.addEventListener('mousemove', (e) => {
                    cursor.style.left = `${e.clientX}px`;
                    cursor.style.top = `${e.clientY}px`;
                });

            });

            video.addEventListener('mouseout', () => {
                preview.pause();
                cursor.remove();
            });
        });
    }
}
playPreview();

window.addEventListener('resize', () => {
    (0,_modules_functions_appHeight_js__WEBPACK_IMPORTED_MODULE_0__["default"])();
});

window.addEventListener('scroll', () => {
    headerChange();
    showUpBtn();
});

document.addEventListener('click', (e) => {
    const video = e.target.closest('.video');
    if (video) {
        activateFullVideo(video);
    }

    const footerBtn = e.target.closest('.form-footer button');
    if (footerBtn) {
        chechEmail(footerBtn, e);
    }

    const upBtn = e.target.closest('.up');
    if (upBtn) {
        scrollToTop();
    }
});

document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        (0,_modules_functions_burger_js__WEBPACK_IMPORTED_MODULE_1__.burgerClose)();
    }
});

document.addEventListener('input', (e) => {
    const footerInput = e.target.closest('.form-footer input');
    if (footerInput) {
        showFooterBtn(footerInput);
    }

    const formName = e.target.closest('.form input[name="user-name"]');
    if (formName) {
        checkForm(formName);
    }

    const formEmail = e.target.closest('.form input[name="email"]');
    if (formEmail) {
        checkForm(formEmail);
    }

    const formMessage = e.target.closest('.form textarea[name="message"]');
    if (formMessage) {
        checkForm(formMessage);
    }
});
})();

/******/ })()
;